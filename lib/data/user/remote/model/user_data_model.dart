class UserRemoteModel {
    int idUser;
    String name;
    String surname1;
    String surname2;
    int idGender;
    String nameGender;
    int mobile;
    String email;
    String dni;
    dynamic nie;
    dynamic passport;
    DateTime birthDate;
    String address;
    int idMunicipality;
    int codCountry;
    String nameCountry;
    int codAuto;
    String nameCcaa;
    int idProvince;
    String nameProvince;
    int codMunicipality;
    String nameMunicipality;
    DateTime dateCreation;
    String description;
    int workPermit;
    int autonomousDischarge;
    int ownVehicle;
    String image;
    bool success;
    dynamic idError;
    dynamic messageError;

    UserRemoteModel({
        required this.idUser,
        required this.name,
        required this.surname1,
        required this.surname2,
        required this.idGender,
        required this.nameGender,
        required this.mobile,
        required this.email,
        required this.dni,
        required this.nie,
        required this.passport,
        required this.birthDate,
        required this.address,
        required this.idMunicipality,
        required this.codCountry,
        required this.nameCountry,
        required this.codAuto,
        required this.nameCcaa,
        required this.idProvince,
        required this.nameProvince,
        required this.codMunicipality,
        required this.nameMunicipality,
        required this.dateCreation,
        required this.description,
        required this.workPermit,
        required this.autonomousDischarge,
        required this.ownVehicle,
        required this.image,
        required this.success,
        required this.idError,
        required this.messageError,
    });

    factory UserRemoteModel.fromMap(Map<String, dynamic> json) => UserRemoteModel(
        idUser: json["idUser"],
        name: json["name"],
        surname1: json["surname1"],
        surname2: json["surname2"],
        idGender: json["idGender"],
        nameGender: json["nameGender"],
        mobile: json["mobile"],
        email: json["email"],
        dni: json["dni"],
        nie: json["nie"],
        passport: json["passport"],
        birthDate: DateTime.parse(json["birthDate"]),
        address: json["address"],
        idMunicipality: json["idMunicipality"],
        codCountry: json["codCountry"],
        nameCountry: json["nameCountry"],
        codAuto: json["codAuto"],
        nameCcaa: json["nameCcaa"],
        idProvince: json["idProvince"],
        nameProvince: json["nameProvince"],
        codMunicipality: json["codMunicipality"],
        nameMunicipality: json["nameMunicipality"],
        dateCreation: DateTime.parse(json["dateCreation"]),
        description: json["description"],
        workPermit: json["workPermit"],
        autonomousDischarge: json["autonomousDischarge"],
        ownVehicle: json["ownVehicle"],
        image: json["image"],
        success: json["success"],
        idError: json["idError"],
        messageError: json["messageError"],
    );

    Map<String, dynamic> toMap() => {
        "idUser": idUser,
        "name": name,
        "surname1": surname1,
        "surname2": surname2,
        "idGender": idGender,
        "nameGender": nameGender,
        "mobile": mobile,
        "email": email,
        "dni": dni,
        "nie": nie,
        "passport": passport,
        "birthDate": "${birthDate.year.toString().padLeft(4, '0')}-${birthDate.month.toString().padLeft(2, '0')}-${birthDate.day.toString().padLeft(2, '0')}",
        "address": address,
        "idMunicipality": idMunicipality,
        "codCountry": codCountry,
        "nameCountry": nameCountry,
        "codAuto": codAuto,
        "nameCcaa": nameCcaa,
        "idProvince": idProvince,
        "nameProvince": nameProvince,
        "codMunicipality": codMunicipality,
        "nameMunicipality": nameMunicipality,
        "dateCreation": dateCreation.toIso8601String(),
        "description": description,
        "workPermit": workPermit,
        "autonomousDischarge": autonomousDischarge,
        "ownVehicle": ownVehicle,
        "image": image,
        "success": success,
        "idError": idError,
        "messageError": messageError,
    };
}
